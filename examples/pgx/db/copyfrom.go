// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package db

import (
	"context"

	"github.com/jackc/pgx/v5"
)

type BulkInsertUsersParams struct {
	Name  string `db:"name" json:"name"`
	Email string `db:"email" json:"email"`
}

// iteratorForBulkInsertUsers implements pgx.CopyFromSource.
type iteratorForBulkInsertUsers struct {
	rows                 []BulkInsertUsersParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkInsertUsers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkInsertUsers) Values() ([]any, error) {
	return []any{
		r.rows[0].Name,
		r.rows[0].Email,
	}, nil
}

func (r iteratorForBulkInsertUsers) Err() error {
	return nil
}

type bulkInsertUsersQuery struct {
	ex         QueryExecutor
	rows       []BulkInsertUsersParams
	rowsCopied int64
}

func (q *bulkInsertUsersQuery) SQL() string {
	return ""
}

func (q *bulkInsertUsersQuery) Args() []any {
	return nil
}

func (q *bulkInsertUsersQuery) TableName() pgx.Identifier {
	return []string{"users"}
}

func (q *bulkInsertUsersQuery) ColumnNames() []string {
	return []string{"name", "email"}
}

func (q *bulkInsertUsersQuery) CopyFromSource() pgx.CopyFromSource {
	return &iteratorForBulkInsertUsers{rows: q.rows}
}

func (q *bulkInsertUsersQuery) SetRowsCopied(n int64) {
	q.rowsCopied = n
}

func NewBulkInsertUsersQuery(ex QueryExecutor) *bulkInsertUsersQuery {
	return &bulkInsertUsersQuery{ex: ex}
}

func (q *bulkInsertUsersQuery) Eval(ctx context.Context, arg []BulkInsertUsersParams) (int64, error) {
	q.rows = arg
	if err := q.ex.Execute(ctx, q); err != nil {
		return 0, err
	}
	return q.rowsCopied, nil
}
