{{define "queryCodePgx"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
{{if and (ne .Cmd ":copyfrom") (ne (hasPrefix .Cmd ":batch") true)}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}
{{end}}

{{if ne (hasPrefix .Cmd ":batch") true}}
{{if and .Arg.EmitStruct (ne .Cmd ":copyfrom")}}
type {{.Arg.Type}} struct { {{- range .Arg.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
type {{.MethodName}}Query struct {
	ex     {{$.PackageQualifier}}QueryExecutor
	{{- if .Arg.EmitStruct}}
	arg    {{.Arg.DefineType}}
	{{- else}}
	{{- range .Arg.Pairs}}
	{{.Name}} {{.Type}}
	{{- end}}
	{{- end}}
	result {{.Ret.DefineType}}
}

func (q *{{.MethodName}}Query) SQL() string {
	return {{.ConstantName}}
}

func (q *{{.MethodName}}Query) Args() []any {
	{{- if .Arg.Pair}}
	{{- if .Arg.EmitStruct}}
	{{- $argName := .Arg.Name}}
	return []any{ {{range $i, $f := .Arg.Struct.Fields}}{{if $i}}, {{end}}q.{{$argName}}.{{$f.Name}}{{end}} }
	{{- else}}
	return []any{ {{range $i, $p := .Arg.Pairs}}{{if $i}}, {{end}}q.{{$p.Name}}{{end}} }
	{{- end}}
	{{- else}}
	return nil
	{{- end}}
}

func (q *{{.MethodName}}Query) Scan(row pgx.Row) error {
	return row.Scan({{range $i, $f := .Ret.Struct.Fields}}{{if $i}}, {{end}}&q.result.{{$f.Name}}{{end}})
}

func (q *{{.MethodName}}Query) Result() {{.Ret.DefineType}} {
	return q.result
}

{{- if .Arg.Pair}}
func (q *{{.MethodName}}Query) Eval(ctx context.Context, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
	{{- if .Arg.EmitStruct}}
	q.arg = {{.Arg.Name}}
	{{- else}}
	{{- range .Arg.Pairs}}
	q.{{.Name}} = {{.Name}}
	{{- end}}
	{{- end}}
	if err := q.ex.Execute(ctx, q); err != nil {
		{{- if .Ret.IsPointer}}
		return nil, err
		{{- else}}
		var zero {{.Ret.DefineType}}
		return zero, err
		{{- end}}
	}
	return q.Result(), nil
}
{{- else}}
func (q *{{.MethodName}}Query) Eval(ctx context.Context) ({{.Ret.DefineType}}, error) {
	if err := q.ex.Execute(ctx, q); err != nil {
		{{- if .Ret.IsPointer}}
		return nil, err
		{{- else}}
		var zero {{.Ret.DefineType}}
		return zero, err
		{{- end}}
	}
	return q.Result(), nil
}
{{- end}}

func New{{.MethodName}}Query(ex {{$.PackageQualifier}}QueryExecutor) *{{.MethodName}}Query {
	return &{{.MethodName}}Query{ex: ex}
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
type {{.MethodName}}Query struct {
	ex      {{$.PackageQualifier}}QueryExecutor
	{{- if .Arg.EmitStruct}}
	arg     {{.Arg.DefineType}}
	{{- else}}
	{{- range .Arg.Pairs}}
	{{.Name}} {{.Type}}
	{{- end}}
	{{- end}}
	results []{{.Ret.DefineType}}
}

func (q *{{.MethodName}}Query) SQL() string {
	return {{.ConstantName}}
}

func (q *{{.MethodName}}Query) Args() []any {
	{{- if .Arg.Pair}}
	{{- if .Arg.EmitStruct}}
	{{- $argName := .Arg.Name}}
	return []any{ {{range $i, $f := .Arg.Struct.Fields}}{{if $i}}, {{end}}q.{{$argName}}.{{$f.Name}}{{end}} }
	{{- else}}
	return []any{ {{range $i, $p := .Arg.Pairs}}{{if $i}}, {{end}}q.{{$p.Name}}{{end}} }
	{{- end}}
	{{- else}}
	return nil
	{{- end}}
}

func (q *{{.MethodName}}Query) ScanRow(row pgx.Row) error {
	{{- $retName := .Ret.Name}}
	var {{$retName}} {{.Ret.Type}}
	if err := row.Scan({{range $i, $f := .Ret.Struct.Fields}}{{if $i}}, {{end}}&{{$retName}}.{{$f.Name}}{{end}}); err != nil {
		return err
	}
	q.results = append(q.results, {{.Ret.ReturnName}})
	return nil
}

func (q *{{.MethodName}}Query) Results() []{{.Ret.DefineType}} {
	{{- if $.EmitEmptySlices}}
	if q.results == nil {
		return []{{.Ret.DefineType}}{}
	}
	{{end -}}
	return q.results
}
{{ if .Arg.Pair}}
func (q *{{.MethodName}}Query) Eval(ctx context.Context, {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
	{{- if .Arg.EmitStruct}}
	q.arg = {{.Arg.Name}}
	{{- else}}
	{{- range .Arg.Pairs}}
	q.{{.Name}} = {{.Name}}
	{{- end}}
	{{- end}}
	q.results = nil
	if err := q.ex.Execute(ctx, q); err != nil {
		return nil, err
	}
	return q.Results(), nil
}
{{- else}}
func (q *{{.MethodName}}Query) Eval(ctx context.Context) ([]{{.Ret.DefineType}}, error) {
	q.results = nil
	if err := q.ex.Execute(ctx, q); err != nil {
		return nil, err
	}
	return q.Results(), nil
}
{{- end}}

func New{{.MethodName}}Query(ex {{$.PackageQualifier}}QueryExecutor) *{{.MethodName}}Query {
	return &{{.MethodName}}Query{ex: ex}
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
type {{.MethodName}}Query struct {
	ex           {{$.PackageQualifier}}QueryExecutor
	{{- if .Arg.EmitStruct}}
	arg          {{.Arg.Type}}
	{{- else}}
	{{- range .Arg.Pairs}}
	{{.Name}} {{.Type}}
	{{- end}}
	{{- end}}
	rowsAffected int64
}

func (q *{{.MethodName}}Query) SQL() string {
	return {{.ConstantName}}
}

func (q *{{.MethodName}}Query) Args() []any {
	{{- if .Arg.Pair}}
	{{- if .Arg.EmitStruct}}
	{{- $argName := .Arg.Name}}
	return []any{ {{range $i, $f := .Arg.Struct.Fields}}{{if $i}}, {{end}}q.{{$argName}}.{{$f.Name}}{{end}} }
	{{- else}}
	return []any{ {{range $i, $p := .Arg.Pairs}}{{if $i}}, {{end}}q.{{$p.Name}}{{end}} }
	{{- end}}
	{{- else}}
	return nil
	{{- end}}
}

func (q *{{.MethodName}}Query) SetRowsAffected(n int64) {
	q.rowsAffected = n
}

{{- if .Arg.Pair}}
func (q *{{.MethodName}}Query) Eval(ctx context.Context, {{.Arg.Pair}}) error {
	{{- if .Arg.EmitStruct}}
	q.arg = {{.Arg.Name}}
	{{- else}}
	{{- range .Arg.Pairs}}
	q.{{.Name}} = {{.Name}}
	{{- end}}
	{{- end}}
	return q.ex.Execute(ctx, q)
}
{{- else}}
func (q *{{.MethodName}}Query) Eval(ctx context.Context) error {
	return q.ex.Execute(ctx, q)
}
{{- end}}

func New{{.MethodName}}Query(ex {{$.PackageQualifier}}QueryExecutor) *{{.MethodName}}Query {
	return &{{.MethodName}}Query{ex: ex}
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
type {{.MethodName}}Query struct {
	ex           {{$.PackageQualifier}}QueryExecutor
	{{- if .Arg.EmitStruct}}
	arg          {{.Arg.DefineType}}
	{{- else}}
	{{- range .Arg.Pairs}}
	{{.Name}} {{.Type}}
	{{- end}}
	{{- end}}
	rowsAffected int64
}

func (q *{{.MethodName}}Query) SQL() string {
	return {{.ConstantName}}
}

func (q *{{.MethodName}}Query) Args() []any {
	{{- if .Arg.Pair}}
	{{- if .Arg.EmitStruct}}
	{{- $argName := .Arg.Name}}
	return []any{ {{range $i, $f := .Arg.Struct.Fields}}{{if $i}}, {{end}}q.{{$argName}}.{{$f.Name}}{{end}} }
	{{- else}}
	return []any{ {{range $i, $p := .Arg.Pairs}}{{if $i}}, {{end}}q.{{$p.Name}}{{end}} }
	{{- end}}
	{{- else}}
	return nil
	{{- end}}
}

func (q *{{.MethodName}}Query) SetRowsAffected(n int64) {
	q.rowsAffected = n
}

{{ if .Arg.Pair}}
func (q *{{.MethodName}}Query) Eval(ctx context.Context, {{.Arg.Pair}}) (int64, error) {
	{{- if .Arg.EmitStruct}}
	q.arg = {{.Arg.Name}}
	{{- else}}
	{{- range .Arg.Pairs}}
	q.{{.Name}} = {{.Name}}
	{{- end}}
	{{- end}}
	if err := q.ex.Execute(ctx, q); err != nil {
		return 0, err
	}
	return q.rowsAffected, nil
}
{{- else}}
func (q *{{.MethodName}}Query) Eval(ctx context.Context) (int64, error) {
	if err := q.ex.Execute(ctx, q); err != nil {
		return 0, err
	}
	return q.rowsAffected, nil
}
{{- end}}

func New{{.MethodName}}Query(ex {{$.PackageQualifier}}QueryExecutor) *{{.MethodName}}Query {
	return &{{.MethodName}}Query{ex: ex}
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
type {{.MethodName}}Query struct {
	{{- if .Arg.EmitStruct}}
	{{.Arg.Name}} {{.Arg.Type}}
	{{- else}}
	{{- range .Arg.Pairs}}
	{{.Name}} {{.Type}}
	{{- end}}
	{{- end}}
}

func (q *{{.MethodName}}Query) SQL() string {
	return {{.ConstantName}}
}

func (q *{{.MethodName}}Query) Args() []any {
	{{- if .Arg.Pair}}
	{{- if .Arg.EmitStruct}}
	{{- $argName := .Arg.Name}}
	return []any{ {{range $i, $f := .Arg.Struct.Fields}}{{if $i}}, {{end}}q.{{$argName}}.{{$f.Name}}{{end}} }
	{{- else}}
	return []any{ {{range $i, $p := .Arg.Pairs}}{{if $i}}, {{end}}q.{{$p.Name}}{{end}} }
	{{- end}}
	{{- else}}
	return nil
	{{- end}}
}

func New{{.MethodName}}Query({{.Arg.Pair}}) *{{.MethodName}}Query {
	{{- if .Arg.Pair}}
	{{- if .Arg.EmitStruct}}
	return &{{.MethodName}}Query{
		{{.Arg.Name}}: {{.Arg.Name}},
	}
	{{- else}}
	return &{{.MethodName}}Query{
		{{.Arg.Name}}: {{.Arg.Name}},
	}
	{{- end}}
	{{- else}}
	return &{{.MethodName}}Query{}
	{{- end}}
}
{{end}}


{{end}}
{{end}}
{{end}}
